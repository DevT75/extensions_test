{"version":3,"file":"static/js/564.a588cd61.chunk.js","mappings":"qIAAA,MAAMA,EAAkB,+BAmBlB,SAAUC,EAAqBC,GACnC,GAAIA,EAAQC,IAAIC,WAAW,SAAU,CACnC,MAAMC,EAASH,EAAQC,IAAIG,QAAQ,QAAS,IAC5C,GAAIJ,EAAQK,WAAY,CACtB,MAAMC,EAAYN,EAAQK,WAAWE,SAAS,KAAO,GAAK,IAC1D,MAAO,GAAGP,EAAQK,aAAaC,IAAYH,GAC7C,CACA,OAAOL,EAAgBM,QAAQ,WAAYD,EAC7C,CACA,GAAIH,EAAQC,IAAIC,WAAW,QACzB,OAAOF,EAAQC,IAEjB,MAAM,IAAIO,MAAM,uDAClB,C","sources":["../node_modules/thirdweb/src/utils/arweave.ts"],"sourcesContent":["const DEFAULT_GATEWAY = \"https://arweave.net/{fileId}\";\n\nexport type ResolveArweaveSchemeOptions = {\n  uri: string;\n  gatewayUrl?: string;\n};\n\n/**\n * Resolves the scheme of a given Arweave URI and returns the corresponding URL.\n * @param options - The options object containing the Arweave URI\n * @returns The resolved URL\n * @throws Error if the URI scheme is invalid.\n * @example\n * ```ts\n * import { resolveArweaveScheme } from \"thirdweb/storage\";\n * const url = resolveArweaveScheme({ uri: \"ar://<fileId>\" });\n * ```\n * @storage\n */\nexport function resolveArweaveScheme(options: ResolveArweaveSchemeOptions) {\n  if (options.uri.startsWith(\"ar://\")) {\n    const fileId = options.uri.replace(\"ar://\", \"\");\n    if (options.gatewayUrl) {\n      const separator = options.gatewayUrl.endsWith(\"/\") ? \"\" : \"/\";\n      return `${options.gatewayUrl}${separator}${fileId}`;\n    }\n    return DEFAULT_GATEWAY.replace(\"{fileId}\", fileId);\n  }\n  if (options.uri.startsWith(\"http\")) {\n    return options.uri;\n  }\n  throw new Error(`Invalid URI scheme, expected \"ar://\" or \"http(s)://\"`);\n}\n"],"names":["DEFAULT_GATEWAY","resolveArweaveScheme","options","uri","startsWith","fileId","replace","gatewayUrl","separator","endsWith","Error"],"sourceRoot":""}