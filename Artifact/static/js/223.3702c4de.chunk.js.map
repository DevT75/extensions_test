{"version":3,"file":"static/js/223.3702c4de.chunk.js","mappings":"8JAyIOA,eAAeC,EACpBC,GAEA,MAAM,QAAEC,EAAO,YAAEC,EAAW,QAAEC,GAAYH,EAO1C,GALIC,EAAQG,8BACJH,EAAQG,uBAAuBF,GAInCF,EAAQE,YAAYG,OAAQ,CAC9B,MAAM,sBAAEC,SAAgC,uCAGxC,OAAOA,EAAsB,CAC3BL,UACAC,eAEJ,CAEA,MAAMK,QAAgCC,EAAAA,EAAAA,GAA0B,CAC9DN,YAAaA,EACbO,KAAMR,EAAQS,UAIhB,GAAIP,EAAS,CAEX,MAAM,uBAAEQ,SAAiC,8BAGzC,OAAOA,EAAuB,CAC5BV,UACAC,cACAK,0BACAJ,WAEJ,CAEA,MAAMS,QAAeX,EAAQF,gBAAgBQ,GAO7C,OALAM,EAAAA,EAAAA,GAAsB,CACpBH,QAAST,EAAQS,QACjBI,gBAAiBF,EAAOE,gBACxBC,QAASb,EAAYc,MAAMC,KAEtB,IAAKL,EAAQI,MAAOd,EAAYc,MAAOE,OAAQhB,EAAYgB,OACpE,C,+CChLA,MAAMC,EAAwB,IAAIC,IAiC5B,SAAUP,EAAsBb,GAKpC,MAAM,QAAEU,EAAO,gBAAEI,EAAe,QAAEC,GAAYf,EACxCqB,EAtBF,SACJX,GAEA,MAAMY,EAAgBH,EAAsBI,IAAIb,GAChD,GAAIY,EACF,OAAOA,EAGT,MAAME,GAAWC,EAAAA,EAAAA,GAAiC,IAElD,OADAN,EAAsBO,IAAIhB,EAASc,GAC5BA,CACT,CAW2BG,CAAoBjB,GAE7CW,EAAiBO,SAAS,IACrBP,EAAiBQ,WACpB,CAAEf,kBAAiBC,aAGrBI,EAAsBO,IAAIhB,EAASW,EACrC,C","sources":["../node_modules/thirdweb/src/transaction/actions/send-transaction.ts","../node_modules/thirdweb/src/transaction/transaction-store.ts"],"sourcesContent":["import type { Account } from \"../../wallets/interfaces/wallet.js\";\nimport type { PreparedTransaction } from \"../prepare-transaction.js\";\nimport { addTransactionToStore } from \"../transaction-store.js\";\nimport type { GaslessOptions } from \"./gasless/types.js\";\nimport { toSerializableTransaction } from \"./to-serializable-transaction.js\";\nimport type { WaitForReceiptOptions } from \"./wait-for-tx-receipt.js\";\n\n/** Send transaction options */\nexport interface SendTransactionOptions {\n  /**\n   * The account to send the transaction with\n   */\n  account: Account;\n  /**\n   * The prepared transaction to send\n   */\n  // biome-ignore lint/suspicious/noExplicitAny: library function that accepts any prepared transaction type\n  transaction: PreparedTransaction<any>;\n  /**\n   * Gasless options for the transaction, if applicable\n   */\n  gasless?: GaslessOptions;\n}\n\n/**\n * Sends a transaction using the provided account.\n *\n * You can send a transaction with a [prepared contract call](https://portal.thirdweb.com/references/typescript/v5/prepareContractCall), a [prepared transaction](https://portal.thirdweb.com/references/typescript/v5/prepareTransaction), or using a write [Extension](https://portal.thirdweb.com/typescript/v5/extensions/use).\n * @param options - The options for sending the transaction.\n * @returns A promise that resolves to the transaction result.\n * @throws An error if the transaction reverts.\n * @transaction\n * @example\n *\n * ### Using a prepared contract call\n *\n * ```ts\n * import { sendTransaction, getContract, prepareContractCall } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: sepolia,\n *   client,\n * });\n *\n * const transaction = prepareContractCall({\n *   contract,\n *   method: \"function transfer(address to, uint256 value)\",\n *   params: [to, value],\n * });\n *\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction,\n * });\n * ```\n *\n * ### Using a write extension\n *\n * ```ts\n * import { sendTransaction, getContract } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n * import { mintTo } from \"thirdweb/extensions/erc721\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: sepolia,\n *   client,\n * });\n *\n * const transaction = mintTo({\n *   contract,\n *   to: \"0x...\",\n *   nft: {\n *     name: \"NFT Name\",\n *     description: \"NFT Description\",\n *     image: \"https://example.com/image.png\",\n *   },\n * });\n *\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction,\n * });\n * ```\n *\n * ### Using a prepared transaction\n *\n * ```ts\n * import { sendTransaction, getContract, prepareTransaction } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: sepolia,\n *   client,\n * });\n *\n * const transaction = prepareTransaction({\n *   contract,\n *   to: \"0x...\",\n *   value: toWei(\"0.1\"),\n * });\n *\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction,\n * });\n * ```\n *\n * ### Gasless usage with [thirdweb Engine](https://portal.thirdweb.com/engine)\n * ```ts\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction,\n *  gasless: {\n *    provider: \"engine\",\n *    relayerUrl: \"https://thirdweb.engine-***.thirdweb.com/relayer/***\",\n *    relayerForwarderAddress: \"0x...\",\n *  }\n * });\n * ```\n *\n * ### Gasless usage with OpenZeppelin\n * ```ts\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction,\n *  gasless: {\n *    provider: \"openzeppelin\",\n *    relayerUrl: \"https://...\",\n *    relayerForwarderAddress: \"0x...\",\n *  }\n * });\n * ```\n */\nexport async function sendTransaction(\n  options: SendTransactionOptions,\n): Promise<WaitForReceiptOptions> {\n  const { account, transaction, gasless } = options;\n\n  if (account.onTransactionRequested) {\n    await account.onTransactionRequested(transaction);\n  }\n\n  // if zksync transaction params are set, send with eip712\n  if (options.transaction.eip712) {\n    const { sendEip712Transaction } = await import(\n      \"./zksync/send-eip712-transaction.js\"\n    );\n    return sendEip712Transaction({\n      account,\n      transaction,\n    });\n  }\n\n  const serializableTransaction = await toSerializableTransaction({\n    transaction: transaction,\n    from: account.address,\n  });\n\n  // branch for gasless transactions\n  if (gasless) {\n    // lazy load the gasless tx function because it's only needed for gasless transactions\n    const { sendGaslessTransaction } = await import(\n      \"./gasless/send-gasless-transaction.js\"\n    );\n    return sendGaslessTransaction({\n      account,\n      transaction,\n      serializableTransaction,\n      gasless,\n    });\n  }\n\n  const result = await account.sendTransaction(serializableTransaction);\n  // Store the transaction\n  addTransactionToStore({\n    address: account.address,\n    transactionHash: result.transactionHash,\n    chainId: transaction.chain.id,\n  });\n  return { ...result, chain: transaction.chain, client: transaction.client };\n}\n","import { type Store, createStore } from \"../reactive/store.js\";\nimport type { Hex } from \"../utils/encoding/hex.js\";\n\nexport type StoredTransaction = {\n  transactionHash: Hex;\n  chainId: number;\n};\n\nconst transactionsByAddress = new Map<string, Store<StoredTransaction[]>>();\n\n/**\n * Retrieve the transaction store for a given address.\n * @param address - The address to retrieve the transaction store for.\n * @returns A store of transactions for the given account to subscribe to.\n * @transaction\n * @example\n * ```ts\n * import { getTransactionStore } from \"thirdweb/transaction\";\n *\n * const store = getTransactionStore(\"0x...\");\n * store.subscribe((transactions) => {\n *   console.log(transactions);\n * });\n * ```\n */\nexport function getTransactionStore(\n  address: string,\n): Store<StoredTransaction[]> {\n  const existingStore = transactionsByAddress.get(address);\n  if (existingStore) {\n    return existingStore;\n  }\n\n  const newStore = createStore<StoredTransaction[]>([]);\n  transactionsByAddress.set(address, newStore);\n  return newStore;\n}\n\n/**\n * @internal\n */\nexport function addTransactionToStore(options: {\n  address: string;\n  transactionHash: Hex;\n  chainId: number;\n}) {\n  const { address, transactionHash, chainId } = options;\n  const tranasctionStore = getTransactionStore(address);\n\n  tranasctionStore.setValue([\n    ...tranasctionStore.getValue(),\n    { transactionHash, chainId },\n  ]);\n\n  transactionsByAddress.set(address, tranasctionStore);\n}\n"],"names":["async","sendTransaction","options","account","transaction","gasless","onTransactionRequested","eip712","sendEip712Transaction","serializableTransaction","toSerializableTransaction","from","address","sendGaslessTransaction","result","addTransactionToStore","transactionHash","chainId","chain","id","client","transactionsByAddress","Map","tranasctionStore","existingStore","get","newStore","createStore","set","getTransactionStore","setValue","getValue"],"sourceRoot":""}